{"ast":null,"code":"// If you don't want to host your server code and client code together, you can \n// pay AWS to host your server with HTTPS then config the api url endpoints like below\n// const SERVER_ORIGIN = '<Your server's url>'; \nconst SERVER_ORIGIN = 'http://localhost:8080';\nconst loginUrl = `${SERVER_ORIGIN}/login`;\nexport const login = credential => {\n  return fetch(loginUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify(credential)\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to log in');\n    }\n\n    return response.json();\n  });\n};\nconst registerUrl = `${SERVER_ORIGIN}/register`;\nexport const register = data => {\n  return fetch(registerUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to register');\n    }\n  });\n};\nconst logoutUrl = `${SERVER_ORIGIN}/logout`;\nexport const logout = () => {\n  return fetch(logoutUrl, {\n    method: 'POST',\n    credentials: 'include'\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to log out');\n    }\n  });\n};\nconst topGamesUrl = `${SERVER_ORIGIN}/game`;\nexport const getTopGames = () => {\n  return fetch(topGamesUrl).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to get top games');\n    }\n\n    return response.json();\n  });\n};\nconst getGameDetailsUrl = `${SERVER_ORIGIN}/game?game_name=`;\n\nconst getGameDetails = gameName => {\n  return fetch(`${getGameDetailsUrl}${gameName}`).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to find the game');\n    }\n\n    return response.json();\n  });\n};\n\nconst searchGameByIdUrl = `${SERVER_ORIGIN}/search?game_id=`;\nexport const searchGameById = gameId => {\n  return fetch(`${searchGameByIdUrl}${gameId}`).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to find the game');\n    }\n\n    return response.json();\n  });\n};\nexport const searchGameByName = gameName => {\n  return getGameDetails(gameName).then(data => {\n    if (data && data.id) {\n      return searchGameById(data.id);\n    }\n\n    throw Error('Fail to find the game');\n  });\n};\nconst favoriteItemUrl = `${SERVER_ORIGIN}/favorite`;\nexport const addFavoriteItem = favItem => {\n  return fetch(favoriteItemUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify({\n      favorite: favItem\n    })\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to add favorite item');\n    }\n  });\n};\nexport const deleteFavoriteItem = favItem => {\n  return fetch(favoriteItemUrl, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify({\n      favorite: favItem\n    })\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to delete favorite item');\n    }\n  });\n};\nexport const getFavoriteItem = () => {\n  return fetch(favoriteItemUrl, {\n    credentials: 'include'\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to get favorite item');\n    }\n\n    return response.json();\n  });\n};\nconst getRecommendedItemsUrl = `${SERVER_ORIGIN}/recommendation`;\nexport const getRecommendations = () => {\n  return fetch(getRecommendedItemsUrl, {\n    credentials: 'include'\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to get recommended item');\n    }\n\n    return response.json();\n  });\n};","map":{"version":3,"sources":["D:/projects/TwitchPlus/webFront/twitchplus/src/utils.js"],"names":["SERVER_ORIGIN","loginUrl","login","credential","fetch","method","headers","credentials","body","JSON","stringify","then","response","status","Error","json","registerUrl","register","data","logoutUrl","logout","topGamesUrl","getTopGames","getGameDetailsUrl","getGameDetails","gameName","searchGameByIdUrl","searchGameById","gameId","searchGameByName","id","favoriteItemUrl","addFavoriteItem","favItem","favorite","deleteFavoriteItem","getFavoriteItem","getRecommendedItemsUrl","getRecommendations"],"mappings":"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","sourcesContent":["// If you don't want to host your server code and client code together, you can \r\n// pay AWS to host your server with HTTPS then config the api url endpoints like below\r\n// const SERVER_ORIGIN = '<Your server's url>'; \r\nconst SERVER_ORIGIN = 'http://localhost:8080';\r\n \r\nconst loginUrl = `${SERVER_ORIGIN}/login`;\r\n \r\nexport const login = (credential) => {\r\n  return fetch(loginUrl, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    credentials: 'include',\r\n    body: JSON.stringify(credential)\r\n  }).then((response) => {\r\n    if (response.status !== 200) {\r\n      throw Error('Fail to log in');\r\n    }\r\n \r\n    return response.json();\r\n  })\r\n}\r\n \r\nconst registerUrl = `${SERVER_ORIGIN}/register`;\r\n \r\nexport const register = (data) => {\r\n  return fetch(registerUrl, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data)\r\n  }).then((response) => {\r\n    if (response.status !== 200) {\r\n      throw Error('Fail to register');\r\n    }\r\n  })\r\n}\r\n \r\nconst logoutUrl = `${SERVER_ORIGIN}/logout`;\r\n \r\nexport const logout = () => {\r\n  return fetch(logoutUrl, {\r\n    method: 'POST',\r\n    credentials: 'include',\r\n  }).then((response) => {\r\n    if (response.status !== 200) {\r\n      throw Error('Fail to log out');\r\n    }\r\n  })\r\n}\r\n \r\nconst topGamesUrl = `${SERVER_ORIGIN}/game`;\r\n \r\nexport const getTopGames = () => {\r\n  return fetch(topGamesUrl).then((response) => {\r\n    if (response.status !== 200) {\r\n      throw Error('Fail to get top games');\r\n    }\r\n \r\n    return response.json();\r\n  })\r\n}\r\n \r\nconst getGameDetailsUrl = `${SERVER_ORIGIN}/game?game_name=`;\r\n \r\nconst getGameDetails = (gameName) => {\r\n  return fetch(`${getGameDetailsUrl}${gameName}`).then((response) => {\r\n    if (response.status !== 200) {\r\n      throw Error('Fail to find the game');\r\n    }\r\n \r\n    return response.json();\r\n  });\r\n}\r\n \r\nconst searchGameByIdUrl = `${SERVER_ORIGIN}/search?game_id=`;\r\n \r\nexport const searchGameById = (gameId) => {\r\n  return fetch(`${searchGameByIdUrl}${gameId}`).then((response) => {\r\n    if (response.status !== 200) {\r\n      throw Error('Fail to find the game');\r\n    }\r\n    return response.json();\r\n  })\r\n}\r\n \r\nexport const searchGameByName = (gameName) => {\r\n  return getGameDetails(gameName).then((data) => {\r\n    if (data && data.id) {\r\n      return searchGameById(data.id);\r\n    }\r\n \r\n    throw Error('Fail to find the game')\r\n  })\r\n}\r\n \r\nconst favoriteItemUrl = `${SERVER_ORIGIN}/favorite`;\r\n \r\nexport const addFavoriteItem = (favItem) => {\r\n  return fetch(favoriteItemUrl, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    credentials: 'include',\r\n    body: JSON.stringify({ favorite: favItem })\r\n  }).then((response) => {\r\n    if (response.status !== 200) {\r\n      throw Error('Fail to add favorite item');\r\n    }\r\n  })\r\n}\r\n \r\nexport const deleteFavoriteItem = (favItem) => {\r\n  return fetch(favoriteItemUrl, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    credentials: 'include',\r\n    body: JSON.stringify({ favorite: favItem })\r\n  }).then((response) => {\r\n    if (response.status !== 200) {\r\n      throw Error('Fail to delete favorite item');\r\n    }\r\n  })\r\n}\r\n \r\nexport const getFavoriteItem = () => {\r\n  return fetch(favoriteItemUrl, {\r\n    credentials: 'include',\r\n  }).then((response) => {\r\n    if (response.status !== 200) {\r\n      throw Error('Fail to get favorite item');\r\n    }\r\n \r\n    return response.json();\r\n  })\r\n}\r\n \r\nconst getRecommendedItemsUrl = `${SERVER_ORIGIN}/recommendation`;\r\n \r\nexport const getRecommendations = () => {\r\n  return fetch(getRecommendedItemsUrl, {\r\n    credentials: 'include',\r\n  }).then((response) => {\r\n    if (response.status !== 200) {\r\n      throw Error('Fail to get recommended item');\r\n    }\r\n \r\n    return response.json();\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}